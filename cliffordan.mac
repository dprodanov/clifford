/*******************************
Clifford algebra
a lightweight package for  component-wise Geometric Algebra calculations

Clifford analysis; geometric calculs
 
@version 2.1 Date 23 Nov 2024
		- fix in EL
		2.0 Date 8 Jul 2023
		- gradbasis 
		- assume_pos option 
		- changes in cndirdiff, ctotprojdiff
		1.9 Date 18 Dec 2021 
		- constrained Lagrangians
		1.8.9 Date 31 Jul 2021
		- cinv changed to cinvinblade
		- bugfix in dependsv
		1.8.8 Date 25 May 2021 
		- potentiategr - integrates a k-vector
		1.8.7 Date 25 Apr 2020 
		- change in cdirdiff
		- cdirdiffn - directional derivative of order n-1
		- cdirdiffi - 
		1.8.6 Date 26 Jan 2020
		- climoivre integrated
		1.8.5 Date 17 Jan 2020
		- pintegrate added
		- partcoord added
		- grank added
		- potentiate added
		1.8.4 Date 11 Jan 2020
		- cndirdiff sign change
		- obsolete parts removed (old convderiv)
		1.8.3 1 Sept 2019 	
		- convderiv added
		- experimental functions moved
		1.8.2  Date 04 Feb 2018
		- code refactoring
		1.8.1 Date 20 Sept 2017
		- diffsubst bugfixes
		1.8 Date 23 Aug 2017
		- change of variables fixed
		- bug fixes
		1.7 Date 12 Dec 2016
		- projection derivatives
		1.6 Date 13 Jun 2016
		1.5 Date 10 Apr 2016
		1.2-4 Date 20 Feb 2016
		1.1 Date 22 Jan 2016
		1.0 Date 16 Dec 2015

@depends 'clifford

**********************************
 * @license This library is free software	 you can redistribute it and/or
 *      modify it under the terms of the GNU Lesser General Public
 *      License as published by the Free Software Foundation	 either
 *      version 2.1 of the License, or (at your option) any later version.
 *
 *      This library is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY	 without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *       Lesser General Public License for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public
 *      License along with this library	 if not, write to the Free Software
 *      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
 stringdisp:true;
 declare(trigsimp, evfun);
 
if get('clifford,'version)=false then (
	
	err:errcatch(
		load("clifford.mac"),
		load("climoivre.mac")
	),
	
	if emptyp(err) then (
		infix ("|", 130, 129),
		infix ("&", 130, 129)
	)
	
);

/* move to clifford ?*/
if get('cliffordan,'version)=false then (
	remove("@", operator),
	"inner product",
	infix ("@", 130, 129),
	"@"(a, b):=  scprod(a,b),
	print("warning: redefining @")

);

%clverbose:false;
%divsimp:true;

matchdeclare([%ff, %xx], symbolp, %nn, integerp, %bb, true);
defmatch(%diffpar, %bb*'diff(%ff, %xx, %nn));

 
%sclardecl:true;
/*
declaring dependencies
*/
dependsv(F, var):= block([ ee, u, var2, _k], 
	if listp(F) then 
		map (lambda([u], dependsv(u, var)), F)
	else (
		if %sclardecl= true then(
			ee:buildq([F], declare(F, scalar) ), 
			ev(ee, nouns)
		),
		
		if subvarp(F) then F:op(F),
		var2:var,
		var: if subvarp(var) then  op(var) else var,
		if listp(var) then
			var:map(lambda([u], if subvarp(u) then  op(u) else u), var),
		ee:buildq([var], declare(var, scalar) ),  

		ev(ee, nouns),
		
		var:var2,
	/*	display(var),*/
		ee:buildq([var], if listp(var) then 
							makelist(var[_k], _k, length(var)) 
						 else 
							var ), 
		display(ev(ee, nouns)),
		ev(depends(F,ee), nouns)
	)
);

 
/*
 Calculus functions
*/

/* total differentiation; 
no assumptions */
totdiff(f, x, [lv]):=block( [ret:0, u],
	if mapatom(x) then 
		ret: diff( f, x )
	else (
		if emptyp(lv) then
			lv:listofvars(x)
		else 
			lv:lv[1],
		/*display(lv),*/
		for u in lv do
			if symbolp(u) then
				ret: ret + diff(f, u) / diff(x, u)
	),
	ret
);


/* fix */
ctotdiffs(f, x):=block( [ret:0, lv, ia],
	if mapatom(x) then 
		ret: diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol, z))),		
		for u in lv do
			if symbolp(u) then
				if symbolp(f) then
					ret: ret + cinvblade(diff(x, u)). subst(".", "*", diff( f, u ))
				else (
					ia:inargs(f),
					if length(ia)=1 then
						ret: ret + cinvblade(diff(x, u)). subst(".", "*", diff(inop(f), u)* diff(first(ia), u))
					else
						ret: ret + cinvblade(diff(x, u)). subst(".", "*", diff( f, u ))
				)	
			
	),
	ret
);

diffp(expr):= inop(expr)=nounify('derivative);

/* total differentiation; 
 subsitutions*/
dsymb:nounify('derivative);

diffsubst(deq, dvar, eq):=block([nn, zz, u,   sop, sargs, ret, l, r, dsymb:nounify('derivative) ],
	if numberp(deq) then return(deq),
	/*disp(deq),*/
	sop:inop(deq),
	if op(eq)="=" then zz:rhs(eq) else error("provide explicit equation"),
	if inop(deq)="+" then 
		ret:map(lambda([u], diffsubst(u, dvar, eq)), deq)
	else (
		ret:deq,
		if diffp(deq) then (
			sargs:inargs(deq),
			nn:sargs[3],
			if not listp (dvar) then dvar:[dvar],
			/*display(lhs(eq), sargs[2]),*/
			if lhs(eq)=sargs[2] then (		 
				ret:ev(deq, diff),
				ret: block([ ff, xx, nn, fu], 
					subst(dsymb=lambda([ff, xx, nn], 
					if not mapatom(ff) then	(   
						fu:subst(eq, ff), 
						'totdiff(fu, zz, dvar)) else 'totdiff(ff, zz, dvar)
					), ret)
				),
				/*ret:subst(dsymb=lambda([ff, xx, nn], disp(ff, zz), totdiff(ff, zz, [dvar])), ret),	*/
				/*ret:subst(dsymb=lambda([ff, xx, nn],  totdiff(ff, zz, [dvar])), ret),	*/				
				ret:ev(ret, nouns),
				if nn>1 then 
					for k:1 thru nn-1 do ret:totdiff(ret, zz, dvar),
			/*	display(ret),*/
				ret:subst(eq, ret)
			)		
		) else (
			[l, r]: oppart(deq, lambda([u], freeof(dsymb, u))),		
			/*display(l, r),*/		
			if r#nil then
				r: diffsubst(r, dvar, eq)
			else r:1,	
			l: subst(eq, l),
			ret:l*r
		)
	),
	ret
);


/* 
Clifford-valued
total differentiation; 
cinv->cinvblade
*/
ctotdiff(f, x):=block( [ret:0, lv, u, z],
	if mapatom(x) then 
		ret: diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol, z))),		
		for u in lv do 
			ret: ret + cinvblade(diff(x, u)). subst(".", "*", diff( f, u ))
	),
	if assume_pos=true then 
		ret:subst(abs=lambda([u], u),ret),
	ret
);



/*
 connection-type of derivatives
*/
conmderivl(f, x):=block([lv, sq],
	sq:makelist( asymbol[i] @ asymbol[i],  i , ndim),
	lv:makelist( asymbol[i]@x *sq[i],  i , ndim),
	genmatrix( lambda([i,j], sq[i]* dotsimpc(expand(asymbol[i]. ctotdiff(f, lv[j])))), ndim)
);

conmderivr(f, x):=block([lv, sq],
	sq:makelist( asymbol[i] @ asymbol[i],  i , ndim),
	lv:makelist( asymbol[i]@x *sq[i],  i , ndim),
	genmatrix( lambda([i,j], sq[i]* dotsimpc(expand(ctotdiff(f, lv[j]). asymbol[i]))), ndim)
);


/* 
Metrics table */
metrics(x, lst):=block([n, ek],
	ek: maplist (lambda([u], diff(x, u)), lst),
	/*disp(ek),*/
	n:length(lst),
	genmatrix( lambda([i,j], trigsimp( (ek[i] @ ek[j] ))), n)
);


/* 
 Clifford-valued
 directional derivative
 */
cdirdiff(f, v, x):=block( [ret:0, u, lv, m, z, uu:0, qq],
	if mapatom(x) then 
		ret: scalarpart(v)*diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol, z))),		
		for u in lv do (
			qq: diff(x, u),
			m: qq @ qq,
			if m#0 then m:1/m,
			uu:m*(qq @ v),
			ret: ret + uu * subst(".", "*", diff( f, u ))
			)
	),
	ret:dotsimpc(ret),
	if assume_pos=true then 
		ret:subst(abs=lambda([u], u),ret),
	ret:clifact(ret)
);

cdirdiffn(f, v, x, n):=block([ret],
	if not numberp(n) then return ('cdirdiffn(f, v, x, n)),
	ret:cdirdiff(f, v, x),
	for i:1 thru n-1 do 
		ret: cdirdiff(ret, v, x),
	ret
);

/**
Cartan decomposition
*/
cdirdiffa(f, v, x):=block( [ret:0, qq, pp, ee, kv, %k:gensym("k"), ipdecomp:true, inprotype:sym, lv],
	if mapatom(x) then 
		ret: scalarpart(v)*diff( f, x )
	else (
		 kv:cvect(%k),
		 lv: invautom( clv(v)),
		 ret: mvectdiff( kv | f, x),
		 display(ret),
		 for ee in lv do (
		   qq: ee @ v,
		   pp: ee @ kv, 
		   ret:subst(pp=qq, ret)
		 ),
		 ret: v | mvectdiff (f, x) +  ret
	),
	ret:clifact(ret)
);

/* 
 Clifford-valued
 meet of the directional derivative
 */
cdirdiffi(f, v, x):=block ([ret:0, m, z, p],
	if mapatom(x) then 
		ret: v|  diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol, z))),		
		for u in lv do (
			qq: diff(x, u),
			m: qq @ qq,
			if m#0 then m:1/m,
			uu: (v | qq )*m, 
			ret: ret + uu . subst(".", "*", diff( f, u ))
			)
	),
	ret:dotsimpc(expand(ret)),
	ret:clifact(ret)
);

/*
dual of the directional derivative
*/
cdirdualdiff(f, v, x):=block( [ret:0],
 ret: cdirdiff(f, v, x),
 clihdual(ret)
);

/*
rejective derivative
*/
cndirdiff(f, v, x):=block( [ret:0, lv, uu:0, m, qq],
	if mapatom(x) then 
		ret: scalarpart(v)*diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol, z))),		
		for u in lv do (
			qq: diff(x, u),
			m: qq @ qq,
			if m#0 then m:1/m,
			uu: ( qq & v)*m,
			ret: ret + uu. subst(".", "*", diff( f, u ))
		)
	),
	ret:expand(ret),
	ret:dotsimpc(ret),
	ret:clifact(ret)
);

/**
projective derivative
*/
ctotprojdiff(f, v, x):=block( [ret:0, lv, uu:0, qq, gn, ss:0, ipdecomp:true],
	if mapatom(x) then 
		ret: scalarpart(v)*diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol, z))),		
		gn:maxgrade(v),
		for u in lv do (
			qq: cinvblade(diff(x, u)),
			uu: dotsimpc(expand(v | qq)),
	 
			ret: ret + uu & subst(".", "*", diff( f, u ))
			)
	),
	ret:expand(ret),
	ret:dotsimpc(ret),
	ret:clifact(ret)
);


ctotintdiff(f, x):=block( [ret:0, lv],
	if mapatom(x) then 
		ret: diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol,z))),
		for u in lv do 
			ret: ret + cinvblade(diff(x, u)) | subst(".", "*", diff( f, u ))
	),
	ret
);

ctotextdiff(f, x):=block( [ret:0, lv],
	if mapatom(x) then 
		ret: diff( f, x )
	else (
		lv: sublist( listofvars(x), lambda ([z], freeof(asymbol,z))),
		for u in lv do 
			ret: ret + cinvblade(diff(x, u)) & subst(".", "*", diff( f, u ))
	),
	ret
);

/*
 multi vector derivative
*/
mvectdiff(f, x, [k] ):=block ([s:0, f1:copy(f), p],
	if emptyp(k) then k:1 else k: k[1],
	x:expand(x),
	for p:1 thru k do (
		s:ctotdiff(f1, x),
		s:cliffsimpall(s),
		f1:s
	),
	if %divsimp=true then (
		s:trigsimp(s),
		s:clifact(s)
	),
	s
);

mvectdiffs(f, x, [k] ):=block ([s:0, f1:copy(f), p],
	if emptyp(k) then k:1 else k: k[1],
	x:expand(x),
	for p:1 thru k do (
		s:ctotdiffs(f1, x),
		s:cliffsimpall(s),
		f1:s
	),
	if %divsimp=true then (
		s:trigsimp(s),
		s:clifact(s)
	),
	s
);
 
/*
partial derivative
*/ 
pardiff(f, x, [k] ):=block( [ret:0, u:gensym() ],
	if emptyp(k) then k:1 else k: k[1],
	if mapatom(x) then 
		ret:diff(f, x, k )
	else (
		ret:diff(ratsubst( u, x, f), u, k),
		ret:subst(u=x,ret)
	),
	ret
);

/*
 vector derivative
 reference implementation
*/
vectdiff(f, x, [k] ):=block ([s, n:1, m, i ],
	if listp(x) then n:length(x) else x:[x],
	if n>ndim then error("size mismatch"),
	if emptyp(k) then k:1 else k: k[1],
	for p:1 thru k do (
		i:1, s:0,
		for m in x do (
			if not emptyp(m) then
				s: s+ cinvblade(asymbol[i]). subst(".", "*", pardiff( f, m )),
			i:i+1
		),
		s:cliffsimpall(s),
		f:s
	),
	s
);

/*
 multi vector partial derivative
*/
parmvectdiff(f, x, [k] ):=block ([s, z, m, i, ee, xx, df, qq, es ],
	[ee, xx]:clicoeff2(x, 'list),
	if emptyp(k) then k:1 else k: k[1],
	es: sublist( listofvars(x), lambda ([z], not freeof(asymbol, z))),
	if %clverbose=true then 
		display(es),
	for p:1 thru k do (
		i:1, s:0,
		for m in xx do (			
			df: expand(pardiff( f, m )),
			qq: cinvblade(ee[i]),
			s: s +  cliffsimpall(qq . subst(".", "*", df )),
			i:i+1
		),
		if %divsimp=true then (
			if not emptyp(es) then
				s:simpfact(s, es)
		),
		f:s
	),
	clifact(s)
);


parmvectdirdiff(f, v, x, [k] ):=block ([s, ee, xx,  df, qq,  uu ],
	[ee, xx]:clicoeff2(x, 'list),
	if %clverbose=true then
		display(xx),
	if emptyp(k) then k:1 else k: k[1],
	for p:1 thru k do (
		s:0,
		for i:1 thru length(xx) do (			
			df: expand(pardiff( f, xx[i] )),
			qq: cinvblade(ee[i]),
			uu: qq @ v,
			/*display(qq, uu, df),*/
			s: s +  cliffsimpall(uu*subst(".", "*", df ))
		),
		f:s
	),
	s
);

parmvectextdiff(f, x, [k] ):=block ([s, n:1, z, m, i, ee, xx, df, qq, es, ipdecomp:true],
	[ee, xx]:clicoeff2(x, 'list),
	if %clverbose=true then
		display(xx),
	if emptyp(k) then k:1 else k: k[1],
	es: sublist( listofvars(x), lambda ([z], not freeof(asymbol, z))),
	"display(es)",
	for p:1 thru k do (
		i:1, s:0,
		for m in xx do (			
			df: expand(pardiff( f, m )),
			qq: cinvblade(ee[i]),
			s: s +  cliffsimpall(qq & subst(".", "*", df )),
			i:i+1
		),
		if %divsimp=true then (
			/*s:cliffsimpall(s),*/
			if not emptyp(es) then
				s:simpfact(s, es)
		),
		f:s
	),
	clifact(s)
);


parmvectintdiff(f, x, [k] ):=block ([s, n:1, z, m, i, ee, xx, df, qq, es, ipdecomp:true],
	[ee, xx]:clicoeff2(x, 'list),
	if %clverbose=true then
		display(xx),
	if emptyp(k) then k:1 else k: k[1],
	es: sublist( listofvars(x), lambda ([z], not freeof(asymbol, z))),
	"display(es)",
	for p:1 thru k do (
		i:1, s:0,
		for m in xx do (			
			df: expand(pardiff( f, m )),
			qq: cinvblade(ee[i]),
			s: s +  cliffsimpall(qq | subst(".", "*", df )),
			i:i+1
		),
		if %divsimp=true then (
			/*s:cliffsimpall(s),*/
			if not emptyp(es) then
				s:simpfact(s, es)
		),
		f:s
	),
	clifact(s)
);

/*
 interior vector derivative
*/
intmvectdiff(f, x, [k] ):=block ([s:0, n:1, m, esm, ipdecomp:true],
	if emptyp(k) then k:1 else k: k[1],
	x:expand(x),
	for p:1 thru k do (
		s:ctotintdiff(f, x),
		s:cliffsimpall(s),
		f:s
	),
	if %divsimp=true then (
		es: sublist( listofvars(x), lambda ([z], not freeof(asymbol, z))),
		"display(es)",
		s:trigsimp(s),
		if not emptyp(es) then
			s:simpfact(s, es),
		s:clifact(s)
	),
	s
);


/*
 exterior vector derivative
*/
extvectdiff(f, x, [k] ):=block ([s:0, n:1, m, es],
	if emptyp(k) then k:1 else k: k[1],
	x:expand(x),
	for p:1 thru k do (
		s:ctotextdiff(f, x),
		s:cliffsimpall(s),
		f:s
	),
	if %divsimp=true then (
		"display(es)",
		s:trigsimp(s),
		s:clifact(s)
	),
	s
);

alias (extmvectdiff, extvectdiff); 

svectdiff(f, x, [k] ):=block ([ df],
	if emptyp(k) then k:1 else k: k[1],
	for p:1 thru k do (
		df:mvectdiff(f, x, p),
		df:scalarpart(df)
		),
	df
);

vvectdiff(f, x, [k] ):=block ([ df],
	if emptyp(k) then k:1 else k: k[1],
	for p:1 thru k do (
		df:mvectdiff(f, x, p),
		df:nscalarpart(df)
		),
	if %divsimp=true then 
			df:clifact(df),
	df
);
 


/*
convective derivative
*/
convderiv(f, t, xx, [vs]):=block([ez, es, lv, tt:gensym("t"), ret:0, pv, 
			aa:[], inprotype:ic, u, opsubst:true, derivsubst:true],			
	if not emptyp(vs) then  (
		ret:parmvectdirdiff(f, vs[1], xx )
	) else (
		xx:expand(xx),
		lv:listofvars(xx),
		ez:sublist( lv, lambda ([u], freeof(asymbol, u))),
		es:sublist( lv, lambda ([u], not freeof(asymbol, u))),
		depends (ez, t),
		pv:diff(xx,t),
		apply ('remove, [ez, 'dependency]),
		ret:parmvectdirdiff(f, pv, xx )
	),
	ret:diff(f,t)+ret	
);

/*
 Euler-Lagrange equations
*/

/*
EL  field Lagrangians
actually, a functional derivative 
*/

ciELfdiff(_F, rr, pvars):=block(
[eq:0, p, pv, ee, qq, ss:[], zz:[],  vv, lv ],
	[p, pv]:pvars,
	if %clverbose=true then
		display(p, pv),	 
	[ee, vv]:clicoeff(pv, 'list),
	lv: sublist( listofvars(rr), lambda ([z],  freeof(asymbol, z) )),	
	if not mapatom(vv) then vv: substinpart("[",vv, 0)
	else vv:[vv],
	for j:1 thru length(vv) do (
		for i:1 thru length(lv) do ( 
			if inop(vv[j])#"+" then (
				push(vv[j]=vv[j](lv[i]), ss),
				push(vv[j](lv[i])=vv[j], zz)
			)
		)
	),
	/*display(ss, zz),*/
	qq:parmvectdiff(_F, pv),
	if %clverbose=true then
		display(qq),
	qq:psubst(ss, qq),
	eq:parmvectdiff(_F, p)-psubst(zz, mvectdiff(qq , rr)),
	clifact(eq)
);

/**/
alias (EuLagEq2, ciELfdiff);

/*Energy-momentum equation*/
ciELfdiff3(_F, rr, pvars) :=block(
[eq:0, p, pv, ee, qq, ss:[], zz:[],  vv, lv, dq],
[p, pv]:pvars,
	if %clverbose=true then
		display(p, pv),	 
	[ee, vv]:clicoeff(pv, 'list),
	lv: sublist( listofvars(rr), lambda ([z],  freeof(asymbol, z) )),	
	if not mapatom(vv) then vv: substinpart("[",vv, 0)
	else vv:[vv],
	for j:1 thru length(vv) do (
		for i:1 thru length(lv) do ( 
			if inop(vv[j])#"+" then (
				push(vv[j]=vv[j](lv[i]), ss),
				push(vv[j](lv[i])=vv[j], zz)
			)
		)
	),
	/*display(ss, zz),*/
	qq:parmvectdiff(_F, pv),
	if %clverbose=true then 
		display(vv, qq),
	qq: psubst(ss, qq),
	eq: psubst(zz, pv @ qq),
	eq -_F
);

/* constrained EL equation,
anholonomic constraints
*/
ciELfdiff1(_F, rr, pvars, cvars):=block(
[eq:0, p, pv, ee, qq, ss:[], zz:[],  vv, lv, cm, _cfr, qm:0 ],
	[p, pv]:pvars,
	[cm, _cfr, lv]:cvars,  
	if %clverbose1=true then
		display( _cfr, cm ,lv),
	eq:ciELfdiff(_F, rr, pvars),
	 
	qm:parmvectdiff(_cfr, p), 
	/* getting the anholonomic constraints*/
	qq: parmvectdiff(_cfr, cm), 
	if %clverbose1=true then
		display(qm, qq),
	/* solving for the constraints*/
	ss:clisolve(qq, lv),
	eq:eq + qm,
	/* subsituting the constraints*/
	eq:subst(ss, eq),
	eq:ev(eq, diff),
	[eq, ss]
);
 

 
/*
 EL particle lagrangians
*/


/*
Euler - Lagrange equation derivation
*/

ciEL1(_F, tt, pvars, smat):=block([eq, p, pv, qq, ee, aa:[], bb:[], es:[], ez:[], qp, qq2, cc:[], dd:[], z ],
	if not listp(pvars) then error("list required"),
	[p, pv]:pvars,
	eq:parmvectdiff(_F, p),
 	es: sublist( listofvars(p), lambda ([z],  freeof(asymbol, z))),	 
	ez: sublist( listofvars(pv), lambda ([z],  freeof(asymbol, z))),	
	/*display(es, ez), */
	if %clverbose1=true then
		display(pv, eq),
	 for j:1 thru length(ez) do (
		push(ez[j]='diff(es[j], tt, 1), aa),
		push('diff(es[j], tt, 1)=ez[j], bb),
		push(ez[j]=ez[j](tt) , cc),
		push(ez[j](tt)=ez[j] , dd)
	),

	qq2: parmvectdiff(_F, pv),
	qq2: subst(cc, qq2),

	/*qp: convderiv(qq2, tt, p, pv),*/
	qp: convderiv(qq2, tt, p, pv),
	if %clverbose1=true then
	display(es, qq2, qp),
	eq:eq - qp,
	eq: subst(dd, eq),	
	/*eq: subst(bb, eq),*/	
	if smat='list then (
		/*eq:subst(aa, eq),*/
		eq: clifact(eq)
	)else if smat='mat then (  		
		eq:bdecompose(eq),
		eq:factorby(eq, ez)
	),
	eq
);
 
ciEL(_F, tt, pvars, smat):=block([eq, p, pv, qq, ee, aa:[], bb:[], es:[], ez:[], ad1, ad2 ],
	if not listp(pvars) then error("list required"),
	[p, pv]:pvars,
	eq:parmvectdiff(_F, p),
 	es: sublist( listofvars(p), lambda ([z],  freeof(asymbol, z))),	 
	ez: sublist( listofvars(pv), lambda ([z],  freeof(asymbol, z))),	
	/*display(es, ez), */
	if %clverbose1=true then
	display(pv, eq, ez, es),
	for j:1 thru length(ez) do (
		if 'diff(es[j], tt, 1)#1 then (
			push(ez[j]='diff(es[j], tt, 1), aa),
			push('diff(es[j], tt, 1)=ez[j] , bb)
		)
	),
	aa:reverse(aa),
	bb:reverse(bb),
	if %clverbose1=true then
		display (aa, bb),
	/*depends(es, tt),*/
	
	qq: parmvectdiff(_F, pv),
	qq: diff(qq, tt),
	eq:eq - qq,
	if %clverbose1=true then
		display(qq,eq),
	eq: subst(bb, eq),
	if %clverbose1=true then
		display(qq),
	if smat='list then (
		eq: clifact(eq)
	)else if smat='mat then (  		
		eq:bdecompose(eq),
		eq:factorby(eq, ez)
	),
 
	eq
);


ciEL2(_F, tt, pvars, cvars):=block(
[eq:0, p, pv, ee, qq, ss:[], zz:[],  vv, lv, cm, _cfr, qm:0 ],
	[p, pv]:pvars,
	[cm, _cfr, lv]:cvars,  
	display( _cfr, cm ,lv),
	eq:ciEL(_F, tt, pvars, 'list),
	display(eq),
	qm:parmvectdiff(_cfr, p), 
	/* getting the anholonomic constraints*/
	qq: parmvectdiff(_cfr, cm), 
	display(qm, qq),
	/* solving for the constraints*/
	ss:clisolve(qq, lv),
	eq:eq + qm,
	/* subsituting the constraints*/
	eq:subst(ss, eq),
	eq:ev(eq, diff),
	[eq, ss]
);


 

EL(_F, q, pvars):=block ([eq:0, p, pv, qq, rr:0, len, ret:[], ss:[]],
    if not listp(pvars) then error("list required"),
     len:length(pvars),
     p:pvars[1],
     ss:pardiff(_F, p),
     if len>1 then (
        for i:2 thru len do (
            pv:pvars[i],
            qq: subst('pv(q),pv, pardiff(_F, pv)),
            display(i, qq, pv),  
            rr: 'diff(qq, q, i-1), rr: subst( pv,'pv(q), rr ),
            ss:ss- (-1)^i*rr, 
            push(pv='diff(pvars[1], q, i-1), ret)
        ),
        ret:reverse(ret)
    ),
    [ ret, eq+ss]
);

/*
EuLagEq2(_F, tt, pvars):=block ([eq:0, p, pv, ret:[]],
	[p, pv]:pvars,
	display(p, pv),
	if listp(p) then
		for i:1 thru length (p) do
			push(pv[i]='diff(p[i], tt), ret)
	else
		push(pv='diff(p, tt), ret),
	depends(pv, tt),
	eq:mvectdiff(_F, p)-diff(parmvectdiff(_F, pv), tt),
	eq:subst(ret, eq=0),
	remove (pv, dependency),
eq
);*/



/*
coordinate substitution
*/
coordsubst(rr, eqs):=block( [lv, ret:rr, qq, z],
	lv: sublist( listofvars(rr), lambda ([z], freeof(asymbol,z))),
	if not listp(eqs) then eqs:[eqs],
	for i:1 thru length(eqs) do (
		if op(eqs[i])="=" then ( 
			qq:rhs(eqs[i]),
			ret:ratsubst(qq,  lhs(eqs[i]), ret)
		) else ( 
			qq:eqs[i],
			ret:ratsubst(qq, lv[i], ret)
			)
	),
	ret:subst("^"="^^",ret),
	ret:trigsimp(ret),
	ret:ratsimp(ret),
	ret
);

gradbasis(rr, lv):=block([ret],
	if not listp(lv) then  error(lv, "not a list"),
	ret : maplist(lambda([u], diff(rr, u)), lv),
	ret:trigsimp(ret),
	ret:ratsimp(ret),
	ret
);

/*
volume element
coordinate substitution
*/

volel(eqs, [lv]):=block( [ ret, qq:[] ],
	if not listp(eqs) then eqs:[eqs],
	if not emptyp(lv) then (
		lv:lv[1],
		for i:1 thru length(eqs) do
			push(rhs(eqs[i]), qq)  
	) else (
		for i:1 thru length(eqs) do (
		 lv: append( sublist( listofvars(rhs(eqs[i])), lambda ([z], freeof(asymbol,z))), lv),
			  push(rhs(eqs[i]), qq)  
			  ), 
		lv:unique (lv)
	  ),
	   qq:reverse(qq),
	   /*disp(qq, lv),*/
	   /*  jacobian computation*/
	ret: outermap (lambda([u,z], diff(qq[z], u)),  lv, makelist(i,i, length(lv))),
	ret: substinpart('matrix, ret,0),
	if %clverbose=true then display(lv, qq, ret),
	ret:determinant(ret),
	if %divsimp=true then (
		ret:trigsimp(ret),
		ret:ratsimp(ret)
	),
	%iv.ret
);

clidet(vlist):=block([dd, n ],
	n:length(vlist),
	dd:vlist[1], 
	for i:2 thru n do (
		dd:dotsimpc(dd & vlist[i]),
		if dd=0 then return(dd)
	),
	factorby(dd, %iv)
);

clivolel(rr, eqs, [lv]):=block([ ret, qq:[], rq, z ],
	if not listp(eqs) then eqs:[eqs],
	if not emptyp(lv) then (
		lv:lv[1],
		for i:1 thru length(eqs) do
			push(rhs(eqs[i]), qq)  
	) else (
	 for i:1 thru length(eqs) do (
		 lv: append ( sublist( listofvars(rhs(eqs[i])), lambda ([z], freeof(asymbol,z))), lv),
		  push(rhs(eqs[i]), qq)  
		  ), 
	  lv:unique (lv)
	  ),
	  rq:subst(eqs,rr),
	ret:map (lambda([z], diff(rq, z)),  lv ),
	if %clverbose=true then display(lv, qq, ret),
	ret:clidet(ret),
	if %divsimp=true then (
		ret:trigsimp(ret),
		ret:ratsimp(ret)
	),
	ret
);


partcoord(rv, dvar):=block([dr, s],
	if not mapatom(dvar) then error("map atom expected ", dvar),
	dr:diff(rv, dvar),
	s:cliabs(dr),
	s:trigsimp(s),
	asymbol[dvar]=ratsimp(dr/s)
);

grank(lst):=block([r:0, lsta, res, n, q],
	lsta:sort(lst, 'ordergreatp),
	n:length(lst),
	q:first(lsta),
	for i:1 thru n-1 do (
		res:resultant(q, lsta[i+1], lsta[i+1]),
		display(res),
		if res#0 then (
			q:res,
			r:r+1
		) else return(r)
	),
	r
);

clc(expr):=(
	sublist(listofvars(expr), lambda([u],  freeof(asymbol, u)))
);


/**
decomposition of nabla | (A & B) - vectors 
*/
graprod(A,B,r):=block([A1,A2,B1, B2],
    A1: cdirdiff(B,A,r),
    A2: cdirdiff(A,B,r),
    B1: A* intmvectdiff(B,r),
    B2: B* intmvectdiff(A,r),
    [A1-A2, B2-B1]
);

/**
decomposition of nabla | (  [V] & A) :  V, A - vectors, [V], protection
*/
decompint(A, V, r):=block([A1, A2],
	A1:cdirdiff(A,V,r),
	A2:intmvectdiff(A,r),
	[A1, -A2*V]
);

/**
decomposition of nabla |  (v | B) -:  v - vector , B - bivector 
nabla |  (v | B) = - v | ( nabla | B) + ( nabla & v) |B
*/
graprod2(V,B,r):=block([A1,A2,B1, B2],
    A2: V| intmvectdiff(B,r),
    B2: mvectdiff(V,r)|B , 
    [-A2, B2]
);


/*
Experimental functions
*/

/* 
https://arxiv.org/pdf/2009.08542.pdf 
integration on a star-shaped domain
*/
potentiategr(expr, r0, r):=block([vv, ee, k, ri, t:gensym("t"), gp, lvc, ker, ret, u],
	 
	ee:buildq([t], declare(t, scalar) ), 
	ev(ee, nouns),
	ri:invautom(r-r0),
 	gp:expand(expr),
	lvc:clc(r),
	for vv in lvc do
		gp:subst(vv=r0+t*(vv-r0),gp),
	ker: ri | gp, 
	if rat(ker)=0 then ker: ri & gp,
	/* the dual vectors are the diffential elements, 
	t is the measure */
	ker: subst(asymbol=lambda ([u], t*asymbol[u]), ker),
	display( ker),
	ret:integrate(ker, t, 0, 1),
	ker:mvectdiff(ret, r),
	first(divide(expr,ker))*ret
);

potentiategr2(expr, r0, r):=block([vv, ee, k, ri, t:gensym("t"), gp, lvc, ker, ret, u],
	 
	ee:buildq([t], declare(t, scalar) ), 
	ev(ee, nouns),
	ri:invautom(r-r0),
 	gp:expand(expr),
	lvc:clc(r),
	for vv in lvc do
		gp:subst(vv=r0+exp(t)*(vv-r0),gp),
	ker: ri | gp, 
	if rat(ker)=0 then ker: ri & gp,
	/* the dual vectors are the diffential elements, 
	t is the measure */
	ker: subst(asymbol=lambda ([u], exp(t)*asymbol[u]), ker),	
	ret:'integrate(ker, t, minf, 1),
	display( ret),
	ker:mvectdiff(ret, r),
	first(divide(expr,ker))*ret
);

/* pole at 0 
potentiategi(expr, r0, r):=block([vv, ee, k, ri, t:gensym("t"), gp, lvc, dr, ker, ret],
	k:maxgrade(expr),
	ee:buildq([t], declare(t, scalar) ), 
	ev(ee, nouns),
	ri:invautom(r-r0),
 	gp:grpart(expr, k),
	lvc:clc(r),
	for vv in lvc do
		gp:subst(vv=r0+t*(vv-r0),gp),
	ker: expand(ri . gp), 
	ker:clifact(dotsimpc(ker)),
	display(gp, ker),
	ret:-integrate(ker*t^(k-1), t,  1, inf),
	ker:mvectdiff(ret, r),
	first(divide(expr,ker))*ret
);
*/
potentiategi(expr, r0, r):=block([vv, ee, k, ri, t:gensym("t"), gp, lvc,  ker, u, ret],
	 
	ee:buildq([t], declare(t, scalar) ), 
	ev(ee, nouns),
	ri:invautom(r-r0),
 	gp:expand(expr),
	lvc:clc(r),
	/* we can also use an exponential substitution*/
	for vv in lvc do
		gp:subst(vv=r0+t*(vv-r0),gp),
	ker: ri | gp, 
	if rat(ker)=0 then ker: ri & gp,
	ker: subst(asymbol=lambda ([u], t*asymbol[u]), ker),
	display(gp, ker),
	ret:-integrate(ker, t,  1, inf),
	ker:mvectdiff(ret, r),
	first(divide(expr,ker))*ret
);

potentiategi2(expr, r0, r):=block([vv, ee, k, ri, t:gensym("t"), gp, lvc,  ker, u, ret],
	 
	ee:buildq([t], declare(t, scalar) ), 
	ev(ee, nouns),
	ri:invautom(r-r0),
 	gp:expand(expr),
	lvc:clc(r),
	/* we can also use an exponential substitution*/
	for vv in lvc do
		gp:subst(vv=r0+exp(t)*(vv-r0),gp),
	ker: ri | gp, 
	if rat(ker)=0 then ker: ri & gp,
	ker: subst(asymbol=lambda ([u], exp(t)*asymbol[u]), ker),
	ker:factor(ker),
	ret:-integrate(ker, t,  1, inf), display(ret),
	ker:mvectdiff(ret, r),
	first(divide(expr,ker))*ret
);

/* logarithmic pole at 0 */
potentiategl(expr, r0, r):=block([vv, ee, k, ri, t:gensym("t"), gp, lvc, ker, ret, u, aa],
	 
	ee:buildq([t], declare(t, scalar) ), 
	ev(ee, nouns),
	ri:invautom(r-r0),
 	gp:expand(expr),
	lvc:clc(r),
	for vv in lvc do
		gp:subst(vv=r0+t*(vv-r0),gp),
	ker:ri | gp,
	if rat(ker)=0 then ker: ri & gp,
	ker: subst(asymbol=lambda ([u], t*asymbol[u]), ker),
	display(gp, ker),
	aa: sqrt(-cnorm(r-r0)),
	assume(aa>1),
	ret:-integrate(ker, t,  1, aa),
	ker:mvectdiff(ret, r),
	ret:first(divide(expr,ker))*ret,
	logcontract(ret)
);



/* path integral*/
pintegrate(ff, rv, eqs, tvar, [bnd]):=block([dr, ffs, ker, ret],
 dr:psubst(eqs, rv),
 dr:diff(dr, tvar),
 ffs:psubst(eqs, ff),
 ker:dotsimpc(expand(ffs.dr + dr.ffs)/2),
 ker:trigsimp(ker),
 if not emptyp(bnd) then (
	bnd:first(bnd),
	ret:'integrate(ker, tvar, bnd[1], bnd[2])
 ) else 
	ret:'integrate(ker, tvar),
 ret
);

put('cliffordan, 'v2,'version);
put('cliffordan, "Dimiter Prodanov", 'author);
put('cliffordan, "(C) - Dimiter Prodanov, 2015 - 2025", 'copyright);

print("package name: cliffordan.mac");
print("author: ", get('cliffordan,'author));
print("version:", get('cliffordan,'version));
print("Recommended location: share/contrib");
print("last update: 23 Nov 2024");