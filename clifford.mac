/*******************************
Clifford algebra in Maxima
Clifford: a lightweight package for performing Geometric Algebra calculations

 @version 
	2.5.2 Date 5 Dec 2021
	-bugfix in dotreverse
	- bugfix in bdecompose
	- norm
	- multtrace moved to climatrep
	
	2.5.1 Date 16 Jul 2021
	- bugfix in clihdual
	- bugfix in cinvblade
	
	2.5.0 Date 29 Jan 2021	
	- matrix code moved to climatrep
	- mingrade
	 
	2.4.9 Date 26 Jan 2020	
	- change in | and & binding power
	- fix in dotsimpc 
	- psnorm removed
	- lvect
	- bugfix in maxgrade
	
 	2.4.8 Date 12 Dec 2019
	- clidual deprecated
	- clihdual -  Hodge dual implementation
	- added documentation of Hodge dual computation
	- bugfix in bivectors
	
	2.4.7 Date 17 Sept 2019
	- dotexpand removed
	- bugfix in dual and clidual
	
	2.4.6 Date 1 Sept 2019
	- bugfix in operpart
	- inprotype='ic computes the Hestenes contraction
	
	2.4.5 Date 20 Feb 2019
	- bugfix in operpart
	
	2.4.4 Date 18 May 2018,
	- fix in clidual
	- fix in dual
	- grades function
	- countsym depreciation
	
	2.4.3 Date 23 Aug 2017
	- bugfixes in map usage
	
	2.4.2 Date 17 July 2017
	-bugfix in explodeop
	- change in oppart
	- dotexpand
	
	2.4.1 Date 17 Jun 2017
	- simplification of Clifford exponents
	- trigsimp inncorporated in cliffsimpall
	- solving 
	
	older log: changelog.txt
	
  @license This library is free software; you can redistribute it and/or
        modify it under the terms of the GNU Lesser General Public
        License as published by the Free Software Foundation; either
        version 2.1 of the License, or (at your option) any later version.
  
        This library is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
         Lesser General Public License for more details.
  
        You should have received a copy of the GNU Lesser General Public
        License along with this library; if not, write to the Free Software
        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

max_version:args(build_info ())[1];
if orderlessp(max_version,"5.37") then error("Maxima verision ", max_version, " not supported");
 
ttyoff:true;
 
"vector symbol";
asymbol:e;
"number of dimensions";
ndim:0;
signature:[];
"pseudoscalar";
%iv:1;
"square of the pseudoscalar";
%ivnorm:1;
"elements of the algebra";
%elements:[1];

_debug:false;
dotexptsimp :false;
noundisp :true;
dotscrules:true;
powerdisp:true;
dotconstrules:false;
prederror :false;
stringdisp:true;
ratprint:false;
powerdisp:true;
pfeformat: true;

/*
 custom operators
*/

	infix ("xor", 60, 60);
	"xor" (a, b):= block ([la:[], lb:[], u],
		if listp(a) and listp(b) then (
			la: sublist (a,  lambda([u], not member(u, b)) ),
			lb: sublist (b,  lambda([u], not member(u, a)) ),
			append(la, lb)
		) else 
		(a or b) and not (a and b)
	);

	/* 
	different types of products 
	*/
	infix ("|", 110, 109);	
	texput ("|", " \\circ ", infix);
 	
	wedgesimp:true;
	inprotype:sym;
	"Hestenes product type";
	ipdecomp:false;	
	
	declare("|", additive);
	"|"(a, b):= block ([l,r, qq, ret:0],
		if ndim=0 then return ( buildq([a,b], "|"(a, b))),
		if scalarp(a) or scalarp(b) then (
			if inprotype='lc then 
				if scalarp(a) then ret: a*b else ret:0
			elseif inprotype='rc then 
				if scalarp(b) then ret: a*b else ret:0
			elseif inprotype='sym then ret:a.b,
			if ipdecomp=true and  (scalarp(a) or  scalarp(b)) then return(0),
			return(ret)
		),
		if not mapatom(a) then a:expand(a),
		if not mapatom(b) then b:expand(b),
		if inop(a)="+" then return (map( lambda ([u],  u | b), a)),
		if inop(b)="+" then return (map( lambda ([u],  a | u), b)),	
		if wedgesimp then (
			if not freeof(".", a) then
				a:cliffsimp1(a),
			if not freeof(".", b) then
				b:cliffsimp1(b)
		),
		l:maxgrade(a),
		r:maxgrade(b),
		qq: l-r,
		/*display(l, r, qq),*/
		if inprotype='rc then 
			if qq<0 then return(0)
			elseif qq<= l+r then 
				ret:cliffsimp1(a.b),
		if inprotype='lc then 
			if qq>0 then return(0)
			else (
				qq:-qq,
				if qq<= l+r then 
				ret:cliffsimp1(a.b)
		),
		if inprotype='sym then (
			qq:abs(qq),
			ret:cliffsimp1(a.b)
		),
		if inprotype='ic then (
			qq:abs(qq),
			ret:cliffsimp1(a. (b))
		),
		grpart(ret, qq)
	);	
	/*texput ("\\", " \\circ ", infix);*/
  	
	"alt-Grassman product type";
	ipdecompalt:false;
	
	
	"outer product";
	infix("&", 110, 109);
	declare("&", additive);
	
	"&"(a, b):= block ([l,r, ret:0],
		if ndim=0 then return ( buildq([a,b], "&"(a, b))),
		if ipdecompalt=true and (scalarp(a) or scalarp(b)) then return(0), 
		if not mapatom(a) then a:expand(a),
		if not mapatom(b) then b:expand(b),
		if inop(a)="+" then return (map( lambda ([u],  u & b), a)),
		if inop(b)="+" then return (map( lambda ([u],  a & u), b)),	
		if wedgesimp then (
			if not freeof(".", a) then
				a:cliffsimp1(a),
			if not freeof(".", b) then
				b:cliffsimp1(b)
		),
		l:maxgrade(a),
		r:maxgrade(b),
		ret:cliffsimp1(a.b),
		ret:grpart(ret, l+r),
		ret
	);
	
	texput ("&", " \\wedge ", infix);
	
	
	scprod(xx, yy):=block ([ret],
		ret: dotsimpc(expand(xx.yy)),
		scalarpart(ret)
	);
	
	
/*
 various products
 - move in a special package
*/

	outprod(a, b):= block ([ss:0, ret:0, lva, lvb, z, lvu],
		if ipdecompalt=true and (scalarp(a) or scalarp(b)) then return(0)
		elseif scalarp(a) or scalarp(b) then return(a*b),
		if not mapatom(a) then a:expand(a),
		if not mapatom(b) then b:expand(b),
		if inop(a)="+" then return (map( lambda ([u],  outprod(u , b)), a)),
		if inop(b)="+" then return (map( lambda ([u],  outprod(a , u)), b)),	
		if wedgesimp then (
			if not freeof(".", a) then
				a:cliffsimp1(a),
			if not freeof(".", b) then
				b:cliffsimp1(b)
		),
		lva:sublist(listofvars(a), lambda([u], not freeof(asymbol, u))),
		lvb:sublist(listofvars(b), lambda([u], not freeof(asymbol, u))),
		lvu:sublist (lva,  lambda([u],  member(u, lvb)) ),
		z: length(lvu),
		if z>0 then 0 else(
			ret:cliffsimp1(a.b),
			ss:scalarpart(ret),
			ret-ss
		)
	);
	

	
	/* change for dimensionality */
	/*dualcoeff(a):=coeff(dotsimpc(a.a.a.dual(a)), %iv);*/
	dualcoeff(a):=block([ss:scprod(a,a) ],
		if ss#0 then
			coeff(dotsimpc(a.dual(a))/ss, %iv)
		else 0
	);
	
	/*infix ("<<", 110, 109);	*/
	lcprod(a, b):=  block([bi, ss, ret ],	
		bi:dual(b), 		
		ret:outprod(a, bi),
		ss:dualcoeff(a),
		ss*dual(ret)
	);
	
	/*infix (">>", 110, 109);	*/
	rcprod(a, b):= block([ai, ss, ret ],		
		ai:dual(a), 		
		ret:outprod(ai, b),
		ss:dualcoeff(b),
		ss*dual(ret)
	);
	
	dotproduct(a,b):=block([ ret, u, ss, ai, bi],	
		ret:lcprod(a, b) + rcprod(a, b),
		u:scprod(a, b),
		ret -u
	);
	
	regproduct(a, b):=block([ai, bi, ss],
		ai:(dual(a)),
		bi:(dual(b)),
		ss:dualcoeff(a)*dualcoeff(b)*%ivnorm,
		ss*dual(ai & bi) 
	);
	
	regproduct2(a, b):=block([ai, bi, ss],
		ai:(dual(a)),
		bi:(dual(b)),
		ss:dualcoeff(a)*dualcoeff(b)*%ivnorm,
		ss*dotsimpc ( ai & bi )
	);

/**
 This part implements a generic partition split operation 
 will  be moved to operpart
*/
inop(expr):= if not mapatom (expr)  then inpart(expr, 0) else 'nil;

inargs(expr):= if not mapatom (expr)  then  substinpart( "[", expr, 0) else 'nil;

/*
partition by predicate with expression reconstruction
literal meaning
*/
oppart(expr, predf):=block(
	[sop, lst, lsttrue:[], lstfalse:[], ltrue, lfalse, err ],
	mode_declare([lsttrue, lstfalse, lst, err], list),
	if mapatom(expr) then (
		if apply(predf, [expr]) then (ltrue:expr, lfalse:'nil)
		else (lfalse:expr, ltrue:'nil),
		return( [ltrue, lfalse])
	) else (
		sop:inop(expr),
		expr:rest(expr, 0),
		lst: inargs(expr),
		if _debug=true then display( sop, lst), 
		for v in lst do (
			if apply(predf, [v]) then push(v, lsttrue) 
			else push(v, lstfalse)
		),
		lsttrue:reverse(lsttrue),
		lstfalse:reverse(lstfalse),
		if _debug=true then display(lsttrue, lstfalse),  
		err:errcatch (
			ltrue:if not emptyp(lsttrue) then 
				/*substinpart(sop, lsttrue, 0) */
				if sop#"[" then
					implodeop(lsttrue, sop)
				else lsttrue
				else 'nil,
			lfalse:if not emptyp(lstfalse) then 
				/*substinpart(sop, lstfalse, 0) */
				if sop#"[" then
					implodeop(lstfalse, sop)
				else lstfalse
				else 'nil,
		 	if _debug=true then display( ltrue, lfalse), 
			lst:[ ltrue, lfalse]
		),
		if _debug=true then display(err),  
		if emptyp(err) then lst:['nil, 'nil ]
	),
	lst
);

/* 
splits an expression by occurencess of an operator
*/
explodeop(expr, sop):=block([lst, w],
	if mapatom(expr) then return ([expr]), 
	lst: inargs(expr),
	lreduce(append, map(lambda([w],   explodeop(w, sop)), lst))
);

/*
combinees a list by operator
*/
implodeop(lsta, sop):=block([w],
	if not listp(lsta) then return (lsta),
	xreduce(sop, maplist(lambda([w], implodeop(w, sop)), lsta))
);

declare(resimplify, evfun);
resimplify(ex):=expand(ex, 0, 0);

/**
end of operpart
*/

/*
real predicate
*/
realp (x):= featurep(x, real);

/*
returns scalar variables
*/
scalarsym():=sublist(props, lambda( [z], if symbolp(z) then scalarp(z) else false));

/*
returns clifford variables
*/
clivars():= block([ uu, z], 
	sublist(values, lambda([z], uu:ev(z), not freeof(asymbol, uu )))
);

/*
returns  variables excluding clifford symbols
*/
clivarsq(expr):= block([ z], 
	sublist(listofvars(expr), lambda([z], freeof(asymbol, z )  ))
);

/*
returns cliffod symbols
*/
clisym():=block([z],
	sublist(props, lambda( [z], if symbolp(z) then not freeof(asymbol, z) else false))
);

/*
simplification of dot-products, ordergreat
*/
dotsimp1(ab):=block([a, b],
  if mapatom(ab) or op(ab)#"." then return(ab),
  a:inpart(ab,1),
  b:rest(ab),
  if orderlessp(a,b) then -b.a else ab
);

/*
simplification of dot-products, orderless
*/
dotsimp2(ab):=block([a, b],
  if mapatom(ab) or op(ab)#"." then return(ab),
  a:inpart(ab,1),
  b:rest(ab),
  if ordergreatp(a,b) then -b.a else ab
);

/*
toggles debugging
*/
toggle_debug():= _debug: not _debug;

/*
list of clifford variables
*/
clv(expr):=(
	sublist(listofvars(expr), lambda([u], not freeof(asymbol, u)))
);

/*
simplification of dot-products
*/
declare (dotsimpc, evfun);
dotsimpc(ab):=block([ba, c:1, v, w:1, q, r, l, z, sop],
  mode_declare(w, fixnum),
  mode_declare([r,l], any),
  sop:inop(ab),
   if mapatom(ab) or freeof(".", ab) or sop='nil or sop="^"  or sop="^^" then return(ab),
  if sop="+" then 
	map(dotsimpc, ab)
  else if sop="*" then (
    [r,l]: oppart(ab, lambda([u], freeof(".", u))),
	 if _debug=true then display(sop, r, l),
	 r:subst(nil=1, r),
	 l:subst(".","*",l),
	r*dotsimpc(l)
  ) else (
	/*ba:copy(ab),*/
	v:copy(inargs(ab)),
	if _debug=true then display(sop, v),
	/* fix for exp*/
	if not freeof (%e, v) then return(ab),
	w:sublist( v, lambda ([z], not freeof(asymbol,z) and mapatom(z))),
	w:permsign(w),
	if w#0 then (
	 v:sort(v),
	 for q in v do c:c.q,
	 if _debug=true then  display(w, v),
	 w*c
	) else ab
  )
);

/*
internal function: parity of permutation calculation
*/
permsign(arr):=block([k:0, len, ret:0 ] ,
	mode_declare([k, len], fixnum),
	if not listp(arr) then return (false),
	len:length(arr),
	for i:1 thru len do (
		if not mapatom(arr[i]) then ret:nil,
		for j:i+1 thru len do 
			if ordergreatp(arr[i], arr[j]) then k:k+1
	),
	if ret#nil then 
		if evenp(k)  then 1 else -1
	else 0
);

/*
Abstract Clifford algebra construction
*/
matchdeclare([aa, ee], lambda([u], not freeof(asymbol,u) and freeof ("+", u) and not scalarp(u) ), [bb,cc], true, 
			[kk, mm, nn], lambda( [z],  integerp(z) and z>0)); 	
			
if get('clifford,'version)=false then (
	simp:false,
	tellsimp(aa[kk].aa[kk], signature[kk] ),
	tellsimpafter(aa[kk].aa[mm], dotsimp2(aa[kk].aa[mm])),
	tellsimpafter(bb.ee.cc, dotsimpc(bb.ee.cc)),
	tellsimpafter(aa[kk]^^nn, powsimp(aa[kk]^^nn)),
	simp:true
);

/*  experimental code*/
if get('clifford,'version)=false then (
	/* simplification of  involution*/
    tellsimpafter('cinvolve('cinvolve(bb)), bb)
);			
			
/*
simplification rules
*/			
matchdeclare(dd, lambda([u],  freeof(asymbol, u)), [gg, hh], lambda([u],  not freeof(asymbol, u))); 
matchdeclare(ds, lambda([u],  not freeof(asymbol, u) and not (freeof("^", u) or freeof("^^", u) ) ), rn, numberp);
	
defrule (clifsimp1, dd*bb, dd.dotsimpc(bb));
defrule (clifsimp11, bb.cc, bb.dotsimpc(cc));
defrule (clifsimp10, bb, dotsimpc(bb));
defrule (clifsimp21, bb/gg, bb . dotinvsimp(1/gg));
defrule (clifsimp3, ds,  powsimp(ds));
defrule (clifsimp4, exp(gg). exp(hh),  exp(gg+hh));


declare (cliexpsimp, evfun);
cliexpsimp(expr):=block([l,r, ret:1],
	if inop(expr)="+" or listp(expr) then 
		expr:map(cliexpsimp, expr ),
	if not freeof(%e, expr) then (
		[l,r]:oppart(expr, lambda([u], freeof(%e, u))),
		/*display(l,r),*/
		r:apply1( r, clifsimp4),
		if not freeof(asymbol, l) then
			l:dotsimpc(l),	
		if not freeof(%e, r) then 
			r: cliexpsimp(r), 
		ret:subst(nil=1, l)*r	
	) else ret:expr,
	ret
);


trigp(expr):=block([u, %trigf: 'sin or 'cos or 'tan or 'cot],
	map(lambda([u],   not freeof(u, expr)), %trigf)
);

/*
full simplification of expressions
inncludes dot-products and inverses
*/
declare (cliffsimpall, evfun);
cliffsimpall(expr):=block([res, aa, bb, sop, simp:true],
	sop:inop(expr),
	if equal(sop, "=") then (
		aa:cliffsimpall(lhs(expr)),
		bb:cliffsimpall(rhs(expr)),
		return( aa = bb)
	) else (
		res:subst("^"="^^", expr),
		res:expand(res),
		res:apply1(res, clifsimp3, clifsimp21),
		res:apply1(res, clifsimp1, clifsimp10),
		/*if not freeof(%e, res) then 
			res:cliexpsimp(res),*/
		if trigp(res) then 
			res: trigsimp(res),
		ratsimp(res)
	)
);

/*
simplification of dot-products
*/
cliffsimp1(expr):=block([res],
	res:expand(expr),
	apply1(res, clifsimp1, clifsimp10)
);


/*
 simplification of inverses
*/
declare (dotinvsimp, evfun);
dotinvsimp(ab):=block( [a,b,c,s],
 mode_declare([a,b,s], any),
 if mapatom(ab) or freeof(asymbol, ab) or op(ab)#"/" then return(ab),
  a:part(ab,1),
  b:part(ab,2),
  c:dotconjugate(b),
  s: expand(c.b),
  if _debug=true then display(a,b,s),
  if not freeof(asymbol, s) then  s:cliffsimp1(s),
  if s#0 and scalarp(s) then a.c/s else ab 
);


/*
Clifford inverse
rewrite in view of the Faddev-Leverier algorithm
- cinvblade - for blades
- cinv - general utility for multivectors
*/
cinv(ab):=block( [s, b, u:1],
	if atom(ab) or freeof(asymbol, ab) then 
	if ab#0 then return(1/ab) else return('nan),
	"first attempt - conjugattion",
	b:dotconjugate(ab),
	s:expand(b.ab),
	if not freeof(asymbol, s) then s: apply1(s, clifsimp10, clifsimp21),
	"second attempt - reversal for blades",
	if not freeof(asymbol, s) then (
	   b:creverse(ab),
	   s:expand(b.ab),
	   if not freeof(asymbol, s) then s: apply1(s, clifsimp10, clifsimp21)
	),
	if _debug=true then  display(s),
	if s#0 and freeof(asymbol, s) then
	return(b/s)
	else return(1/ab)
);


/*
simplification of exponents
*/
powsimp(aa):=block( [a, k, p:1],
  if atom(aa) then return(aa),
  if inop(aa)="^^" then (
	  a:inpart(aa,1),
	  k:inpart(aa,2),
	  if numberp(k) then (
		  for j:1 thru k do p:p.a,
		  dotsimpc(p)
	  ) else aa
   ) else aa
);



/*
constructor of the algebra
lsig[1] - number of positive elements
lsig[2] - number of negative elements
lsig[3] - number of positive elements
lsig[4] - sets signature
*/
clifford(var, [lsig]):=block([m, a, p:0, n:0, r:0, s:1],
	if emptyp(lsig) or length(lsig)>3 then error(" invalid signature"),
	p:lsig[1],
	if length(lsig)=2 then 
		n:lsig[2],
	if length(lsig)=3 then (
		n:lsig[2], 
		r:lsig[3]
	),
	/* optionally we can reverse the sign convention */
	if length(lsig)=4 then (
		n:lsig[2], 
		r:lsig[3],
		s: signum (lsig[4]),
		if s=0 then s:1
	),
	if not (numberp(n) or numberp(p) or numberp(r) or numberp(s) ) then error(" provide numbers"),
	m:p+r+n,
	if _debug=true then print(m,p,n,r),
	if m<=0 then return (false),
	
	local (a),
	a[i,j]:= if i#j then 0 else (
		if i<=p then s else if i>n+p then 0 else -s
	),
	ndim:m,
	makebasis(var),
	signature:makelist(a[i,i], i, m),
	%iv:pscalar(),
	/*aform:genmatrix (a, m, m),*/
	%ivnorm:dotsimpc(%iv.%iv),
	%elements:elements(),
	signature
);


/*
sets the signature of the algebra
*/
set_signature(arr):=block(
	if not listp(arr) or length(arr)#ndim then return(false),
	signature:arr,
	%iv:pscalar(),
	%ivnorm:dotsimpc(%iv.%iv),
	"aform"
);

/*
toggles the signature of the algebra
*/
toggle_signature():=block(
	signature:-signature,
	%iv:pscalar(),
	%ivnorm:dotsimpc(%iv.%iv)
);

/*
constructs the complete basis of the algebra
- additional declarations added for compatibility with complex 
operations
*/
makebasis(var):= block([ ee], 
	asymbol: var,
	ee:buildq([asymbol], declare(asymbol, real)), 
	ev(ee,nouns),
	ee:buildq([asymbol], declare(asymbol, mainvar)), 
	ev(ee,nouns),
	ee:buildq([asymbol], array(asymbol, ndim)	), 
	ev(ee,nouns)
);

/*
constructs the vectors of the algebra
*/
vectors():=makelist(asymbol[i], i, 1, ndim);

/*
constructs the  bi-vectors of the algebra
*/
bivectors():=grelem(2);

grelem(k):=block([u],
	if k=0 then [0]
	else 
	sublist(%elements, lambda([u],  countsymb(u, asymbol)=k))
);


/*
constructs the pseudoscalar of the algebra
*/
pscalar([k]):=block([s:1],
	if not emptyp(k) then k:min(k[1], ndim) else k: ndim, 
	for i:1 thru k do s:s.asymbol[i],
	s
);


/*
releases all rules 
*/
release():=block(
	remrule ("^^",  all),
	remrule ("^",  all),
	remrule (".",  all),
	remrule ("*",  all),
	remrule ("/",  all),
	rem('clifford,'version),
	rem('clifford,'author),
	rem('clifford,'copyright)
);

 
alias (countsym, countsymb); 

/*  
counts occurences of a symbol in an expression
*/
countsymb(ab, sym):=block([inflag:true ],
	if freeof(sym, ab) then return(0),
	if atom(ab) then  
		if sym=ab then return(1),
	if subvarp(ab) then  
		if sym=op(ab) then return(1),
	xreduce("+", maplist( lambda([i], countsymb(i, sym)), ab))
 );

/*
grade decomposition of expressions
 */
grade(expr, [gradexpand]):=block([cc, sop, k ],
	local(cc),
	if ndim=0 then error("ndim =0"),
	array(cc, fixnum, ndim),
	
	if emptyp(gradexpand) then gradexpand:true
	else gradexpand:gradexpand[1],
	
	if not mapatom(expr) then 
	if gradexpand then expr:expand(expr),
	
	sop: inop(expr),
	if sop="+" then (
		for v in expr do (
			k:countsym(v, asymbol),
			if _debug=true then display(k,v),
			cc[k]:cc[k] +v 
		)
	)else ( "simple expression",
		k:countsym(expr, asymbol),
		cc[k]:cc[k] +expr 
	),
	listarray(cc)
);

/*
grade decomposition of expressions
factors and produces a matrix
 */
matrixgrade(expr):=block([ret], 
	ret:grade(expr),
	ret:maplist ( lambda([u], factorby( u, %elements)) , ret),
	transpose(matrix(ret))
);

/*
maximal grade of an expression
*/
maxgrade(expr):=block([lst:[] ],
	if freeof (asymbol, expr) then return (0),
	if not mapatom(expr) then expr:expand(expr),
	if inop(expr)="+" then (
		lst:maplist(maxgrade, expr),
		lmax(lst)
	) else 
		countsymb(expr, asymbol)
);

/*
minimal grade of an expression
*/
mingrade(expr):=block([lst:[] ],
	if freeof (asymbol, expr) then return (0),
	if not mapatom(expr) then expr:expand(expr),
	if inop(expr)="+" then (
		lst:maplist(mingrade, expr),
		lmin(lst)
	) else 
		countsymb(expr, asymbol)
);

/*
 Partial factoring by subexpression
*/
factorby(expr, z):=block([quot, res, ret, ee, u, n, sop, %qq, radsubstflag:true ],
	if emptyp(z) then return (expr),
	if atom(expr) then return (expr),
	if matrixp(expr) then 
		return(matrixmap(lambda([u], factorby(u, z)), expr)),
	if listp(expr) then 
		ret: maplist(lambda([u], factorby(u, z)), expr)
	else (
		if listp(z) then z:flatten(z)
		else z:[z],	
		sop:op(expr),
		if _debug=true then display(expr, sop ),
		if sop="*" then 
			ret:map( lambda([u], factorby(u, z) ), expr)
		else if sop="/" then 
			ret:factorby(num(expr), z)/factorby(denom(expr), z)
		else	if sop="^" then (
			[ee, n]:args(expr),
			ret:factorby(ee, z),
			ret:ret^n
		) else (			 
			if inop(z[1]) = "^" then (
				[ee, n]:inargs(z[1]),
				assume(%qq>0),
				expr:ratsubst(%qq, ee, expr),
				expr:ratsubst(%qq^(1/n), %qq, expr),
				/*display(ee, n),*/
				[quot, res]:divide(expr, %qq),
				/*display(quot, res, expr),*/
				res:subst(z[1], %qq, res),
				quot:subst(z[1], %qq, quot),
				quot:radcan(quot)
			) else
				[quot, res]:divide(expr, z[1]),
			if length(z)>1 then
				res:factorby(res, rest(z)),
				if res#0 then
					ret:factor(quot)*z[1]+res
				else ret:quot*z[1]+res
		)
	),
	ret
);

declare (quotsimp, evfun);
quotsimp(expr):=block([quot, res, dd:denom(expr) ],
	[quot, res]:divide(expr, dd),
	factor(quot)*factor(dd)+factor(res)
);


simpfact(expr, z):=block([ret:expr, u, maperror:false, mapprint:false],
	ret:factor(ret),
	if not mapatom(ret) and not numberp(ret) then
	map(lambda([u], factorby(u, z)), ret) else ret
);


listofclivars(expr):=(
	if length(%elements)=1 then %elements:elements(),
	sublist(%elements, lambda ([u], not freeof(u, expr)))
);

declare (clifact, evfun);
clifact(expr):=block([lcv:[], ret: expr],
	if not mapatom(expr) then (
		lcv: listofclivars(expr),
		if not emptyp(lcv) then
			ret:factorby(expr, lcv) 
	),
	ret
);

alias(clicoeff2, clicoeff); 
/* 
computes the element decomposition
clicoeff2 depreciated
*/
clicoeff(expr, smat):=block([u, ee:[], z:[], cc:[], qq ],
	if length(%elements)=1 then %elements:elements(),
	cc:map(lambda([u], coeff(expr, u)), %elements),
	z:sublist_indices(cc, lambda([u], u#0)),
	ee:makelist(%elements[i], i, z),
	qq:expand(expr-substinpart("+", makelist (cc[i]*%elements[i], i, z), 0)),
	cc:makelist(cc[i], i, z),
	if qq#0 then  (
		cc: cons(qq, cc),
		ee: cons(1, ee)
	),
	if smat='list then 
		[ee, cc]
	else if smat='mat and not emptyp(cc) then  
		[ transpose(matrix(ee)), transpose(matrix(cc))] else [ ]
		
);

/*
computes the blade decomposition
*/
bdecompose(expr):=block([gr:expr, v, zz, lst],
	if not freeof(".", expr) then 
		gr: expand(expr),
	if length(%elements)=1 then 
			%elements:elements(), 
	if gr#0 then
		gr:map( lambda([v], factorby(v, %elements) ), gr ),
	gr:grade(gr),  
	lst:map(lambda([v], if v#0 then clicoeff(v, 'mat) else 0), gr), 
	lst:sublist(lst, lambda([zz],  zz#0))
);


/*
solves for a list of vairables in clifford-valued equation
*/
clisolve(expr, lst):=block([ee, al, u, ret:expr, maperror:false, sol, solveexplicit:true],
	if inop(expr)="=" then 
		ret:expand(lhs(expr)-rhs(expr)),
	[ee, al]:clicoeff(ret,'list),
	sol:map(lambda( [v], map(lambda( [u], solve(factor(v), u)), lst)), al),
	flatten(sol)
);

/*
Clifford reverse of expressions
*/
/* canonical implementation*/
creverse(x):=block ([l, v:0, len, k],
	if not freeof(".",x) then 
		l:grade(expand(x))
	else 
		l:grade(x),
	len: length(l),
	for i:1 thru len do (
		k:mod(i-1,4), 
		k: (if k=0 or k=1 then 1 else -1),
		v:v+ k * l[i] 
	),
	v
);

/* functional implementation*/
declare (dotreverse, evfun);
dotreverse(expr):=block ( [ret, l, r],
	if not freeof(".", expr) then 
		ret: expand(expr) 
	else ret:expr,
	if matrixp(expr) then
		return(matrixmap(dotreverse, expr )),
	if freeof(asymbol, expr) then
		return(expr),
	if inop(ret)="+" or listp(ret) then 
		map(dotreverse, ret )
	elseif inop(ret)="^" then (
		[l, r]: inargs(ret),
		r:dotreverse(r),
		l^r
	)elseif inop(ret)="*" then (
		[l, r]: oppart(ret, lambda([u], freeof(asymbol, u))),
		r:dotreverse(r),
		l*r
	) else (
		[l, r]: oppart(ret, lambda([u], freeof(asymbol, u))),
		if l='nil then l:1,
		if r#'nil then (
			r:reverse(r), 
			r:dotsimpc(r) 
		) else r:1,
		l*r
	) 
);


/*  
Clifford involution of expressions
*/
declare(cinvolve, linear);

cinvolve(x):=block (  
	if not freeof(asymbol, x) then 
		 expand(subst(asymbol=lambda([k], - subvar (asymbol, k) ), x))  
	elseif scalarp(x) then x 
	elseif mapatom(x) then 'cinvolve(x)
	else map('cinvolve, x)
);


/*
Clifford conjugate of expressions
*/
/* canonical implementation*/
cconjugate(x):=block ([l, v:0, len, k],
	if not freeof(".",x) then 
		l: grade(expand(x))
	else 
		l:grade(x),
	len: length(l),
	for i:1 thru len do (
		k:mod(i-1,4), 
		k: (if k=1 or k=2 then -1 else 1),
		v:v+ k * l[i] 
	),
	v
);


/* functional implementation*/
declare (dotconjugate, evfun);
dotconjugate(expr):=block([ret],
	ret: cinvolve(expr),
	dotreverse(ret)
);

/*
constructs all  irreducible elements of the algebra,
optionally includes 1
*/
elements([cpl]):=block([c:1, lst:[], u, v ],
	for i:1 thru ndim do c:c.(1+ asymbol[i] ),
	if emptyp(cpl) then cpl:true 
	else cpl:false,
	c:expand(c),
	lst:inargs(c),
	if cpl then pop(lst),
	sort(lst, lambda([u,v], 
			ordergreatp(u,v) and if not (numberp(u) or numberp(v)) then length(u)< length(v)
			)
	)
);

/**
 multiplication table, all elements,
 it also has a debugging functionality
*/ 
mtable2():=block([n, a, lst],
	local (a),
	lst: elements(all),
	n:length(lst),
	if _debug then 
	a[i,j]:= '(lst[i].lst[j]) else
		a[i,j]:= dotsimpc(lst[i].lst[j]),
	genmatrix(a,n)
);

/**
 inner product table, all elements
*/ 
mtable2i():=block([n,   lst],
	lst: elements(all),
	n:length(lst),
	genmatrix( lambda([i,j], dotsimpc(lst[i] | lst[j] ) ), n)
);

/**
 outer product table, all elements
*/ 
mtable2o():=block([n, a, lst],
	lst: elements(all),
	n:length(lst),
	genmatrix( lambda([i,j], dotsimpc(lst[i] & lst[j] ) ), n)
);

/**
 regressive product table, all elements
*/ 
mtable2r():=block([n, a, lst],
	lst: elements(all),
	n:length(lst),
	genmatrix( lambda([i,j],  dotsimpc(lst[i] . dual(lst[j]))), n)
);

/**
 scalar product table, all elements
*/ 
mtable2s():=block([n, lst],
	lst: elements(all),
	n:length(lst),
	genmatrix( lambda([i,j], scprod(lst[i] , lst[j]) ), n)
);


/**
 multiplication table, reduced
*/
mtable1([lst]):=block([n],
	if emptyp(lst) then 
		lst:makelist(asymbol[i], i, ndim) 
	else 
		lst:lst[1],
	lst:push(1, lst),
	n:length(lst),
	genmatrix( lambda([i,j], dotsimpc(expand(lst[i] . lst[j]) ) ), n)
);

/**
 inner product table, reduced
*/
mtable1i([lst]):=block([n],
	if emptyp(lst) then 
		lst:makelist(asymbol[i], i, ndim) 
	else 
		lst:lst[1],
	lst:push(1,lst),
	n:length(lst),
	genmatrix( lambda([i,j], dotsimpc(lst[i] | lst[j] ) ), n)
);

/**
 multiplication table, reduced
*/
mtable1o([lst]):=block([n],
	if emptyp(lst) then 
		lst:makelist(asymbol[i], i, ndim) 
	else 
		lst:lst[1],
	lst:push(1, lst),
	n:length(lst),
	genmatrix( lambda([i,j], dotsimpc(lst[i] & lst[j] ) ), n)
);

mtable1r([lst]):=block([n],
	if emptyp(lst) then 
		lst:makelist(asymbol[i], i, ndim) 
	else 
		lst:lst[1],
	lst:push(1, lst),
	n:length(lst),
	genmatrix( lambda([i,j],  dotsimpc(lst[i] . dual(lst[j]))), n)
);

mtable1s([lst]):=block([n],
	if emptyp(lst) then 
		lst:makelist(asymbol[i], i, ndim) 
	else 
		lst:lst[1],
	lst:push(1,lst),
	n:length(lst),
	genmatrix( lambda([i,j],  scalarpart ( dotsimpc(lst[i] . lst[j] ) )), n)
);
 


/*
 computes the commutation table with all basis vectors
*/
commtable(ee):=
	matrix(makelist(asymbol[i], i, 1, ndim), 
		  makelist( cliffsimpall ( asymbol[i]. ee - ee. asymbol[i])/2, i, 1, ndim)
		  );

/**
 norm with regard to the Clifford product 
*/
cliabs(x):=block([u:expand(x)],
	u:expand(u.cconjugate(u)),
	u:dotsimpc(u),
	u:scalarpart(u),
	u:sqrt(abs(u)),
	radcan(u)
);




cnorm(x):=block([u:expand(x), z, v],
	u:expand(u | cconjugate(u)),
	u:dotsimpc(u),
	u:expand(u),
	u:scalarpart(u),
	u:ratsimp(u)
);

/**
canonical norm
*/
norm (u ):= block([ret:0 ],
	ret: scprod (u , invautom (u)),
	ret:ratsimp(ret),
	sqrt(ret)
);

/**
vector predicate
*/
vectorp(v):= (
	if not freeof(".", v) then v:expand(v),
	freeof(".", v) and not freeof(asymbol, v)
);

/***********************
 grading functions
*/

/*
 scalar part
*/
scalarpart(v):=block([ r, l, sop ],
	if freeof(asymbol, v) then return (v),
	if not freeof(".", v) then v:expand(v),
	sop: inop(v),
	if sop="+" then (
		[r,l]: oppart(v, lambda([u], freeof(asymbol, u))),
		r:subst('nil=0, r)
	) else 
		if freeof(asymbol, v) then  r:v 
		else r:0,
	r
);

/*
 non scalar part
*/
nscalarpart(v):=block([ r, l, sop ],
	if freeof(asymbol, v) then return (0),
	if not freeof(".", v) then v:expand(v),
	sop: inop(v),
	if sop="+" then (
		[r,l]: oppart(v, lambda([u],  not freeof(asymbol, u))),
		/*display(r,l),*/
		r:subst('nil=0, r)
	) else 
		if not freeof(asymbol, v) then  r:v 
		else r:0,
	clifact(r)
);

/*
 vector part
*/
vectorpart(v):=block([gr],
	if freeof(asymbol, v) then return (0),
	gr:grade(v),
	clifact(gr[2])
);

/*
 multivector part
*/
mvectorpart(v):=block([ r, l, gr ],
	if freeof(asymbol, v) then return (0),
	gr:grade(v),
	gr:sublist(gr, lambda([u], not freeof(".", u))),
	if emptyp(gr) then 0 else
		gr:substinpart("+", gr, 0),
	clifact(gr)
);

/**
 grade of order k
*/
grpart(v, k):=block([gr, u],
	if listp(k) then  
		substinpart("+", map(lambda([u], grpart (v, u)), k), 0)  
	else (
		k:k+1,
		if k>ndim+1 then k:ndim+1,
		gr:grade(v),
		clifact(gr[k])
	)
);

/**
 grade of order k, list version
*/
grpartl(lst, k):=block (
	if listp(lst) then substinpart("+", map(lambda([u], grpart (u, k)), lst), 0)  
);

/**
returns non-zero grade indices
*/
grades(vv):=block([lst, uu, listarith:true],
	lst:grade(vv),
	sublist_indices (lst, lambda([uu], uu#0))-1
);


/* 
 constructs a vector by indexing a symbol
*/
cvect(x, [cc]):=block ([ss:0, _i, qq],
	if emptyp(cc) then
		ss:sum (x[_i]*asymbol[_i], _i, 1, ndim)
	else (
		cc:cc[1],
		for _i:1 thru length(cc) do 
			if not emptyp(cc[_i]) then (
				qq:subst(x=cc[_i], buildq([x], declare(x, scalar))),
				ev(qq, nouns),
				ss: ss+ x[ cc[_i] ]*asymbol[_i]
			)
		),
	qq:buildq([x], declare(x, scalar)),
	ev(qq, nouns),
	ss
);

/* 
 constructs a vector from a given list
*/
lvect(lst ):=block ([ss:0, qq, n],
	if not listp(lst) then error("list expected",lst),
	n: length(lst),
	if n>ndim then error("dimension mismatch",lst),
	sum (lst[i]*asymbol[i], i, 1, n)
);

cmvect(x, k, [cc]):=block ([ss:0, qq, n, elst:grelem(k)],
	n: length(elst),
	if emptyp(cc) then
	if freeof(asymbol, elst) then 
		ss: x[0]
	else
		ss:sum (x[i]*elst[i], i, 1, n)
	else (
		cc:cc[1],
		for i:1 thru length(cc) do 
			if not emptyp(cc[i]) then (
				qq:subst(x=cc[i], buildq([x], declare(x, scalar))),
				ev(qq, nouns),
				ss: ss+ x[ cc[i] ]*elst[i]
			)
		),
	qq:buildq([x], declare(x, scalar)),
	ev(qq, nouns),
	ss
);

/* 
 constructs a multivector
*/
celem(x, [cc]):=block([ee, ss:0, n, qq],
	 ee:elements(all),
	n:length(ee),
	if emptyp(cc) then
		ss:sum (x[i]*ee[i], i, 1, n)
	else (
		cc:cc[1],
		for i:1 thru length(cc) do 
			if not emptyp(cc[i]) then (
				if symbolp(cc[i]) then (
					qq:subst(x=cc[i], buildq([x], declare(x, scalar))),
					ev(qq, nouns)
				),
				ss: ss+ x[ cc[i] ]*ee[i]
			)
		),
	if mapatom(x) then (
		qq:buildq([x], declare(x, scalar)),
		ev(qq, nouns)
	),
	ss
);

/**
 Application functions
*/

/**
   algebraical dual element
 */
dual(expr):=block([lste:[], lsti:[], r, l],
	if matrixp(expr) then
		return(matrixmap(dual, expr )),
	if listp(expr) then
		return(maplist(dual, expr )),
		if not mapatom(expr) and op(expr)="/" then (
		nn:num(expr),
		dd:denom(expr),
		/*display(nn, dd),*/
		return(dual(nn)/dd))	
	elseif not mapatom(expr) and inop(expr)="+" then 
		map(dual, expr)
	else (
		if scalarp(expr) then
			return (expr*%iv),
		[l, r]:subst('nil=1, oppart(expr, lambda([u], freeof(asymbol, u)))),
		/*display(l,r),*/
		lste:clv(r),
		lsti: vectors(),
		lste: lste xor lsti,
		r:substinpart(".", lste, 0),
		l*r
	)
);

/**
   clifford dual element
   Hodge dual 
 */
clihdual(expr):=block([lste:[], lsti:[], lstj:[], r, l, ss:1, nn, dd, ue:1],
	if scalarp(expr) then
		return (expr*%iv),
	if matrixp(expr) then
		return(matrixmap(clihdual, expr )),
	if listp(expr) then
		return(maplist(clihdual, expr )),
	if not mapatom(expr) and op(expr)="/" then (
		nn:num(expr),
		dd:denom(expr),
		return(clihdual(nn)/dd))
	elseif not mapatom(expr) and op(expr)="*" then (
		[l, r]:subst('nil=1, oppart(expr, lambda([u], scalarp( u)))),
		if r#1 and l#1 then
			return (l* clihdual(r))
	)elseif not mapatom(expr) and inop(expr)="+" then 
		return(map(clihdual, (expr)))
	else (
		/*blade case*/			
		[l, r]:subst('nil=1, oppart(expr, lambda([u], freeof(asymbol, u)))),
		lste:clv(r),
		lsti:vectors(),
		for ue in lste do 
			ss: ss* dotsimpc(ue.ue),
		lstj: lste xor lsti,
		/* dual elements*/
		r:substinpart(".", lstj, 0),
		/* non-degenerate algebra*/
		ss:1/ss*permsign( append (lste, lstj)),
		ss*l*r
	)
);

/*
 computes a unit  element
*/
uelem(vv):=block( [qq],
	qq:-cnorm(vv),
	if qq=0 then return(vv),
	if %divsimp=true then (
		qq:trigsimp(qq),
		qq:ratsimp(qq)
	),
	vv/sqrt(qq)
);

/*
 Clifford product decomposition
*/
prodecomp(a,b):=block( [ret, gr, l, r, m, inner:0, outer:0],
	a:cliffsimp1(a),
	b:cliffsimp1(b),
	ret:cliffsimp1(a.b),
	l:maxgrade(a),
	r:maxgrade(b),
	m:abs(l-r),
	n:l+r,	
	" display(l,r, m,n)" , 
	gr:grade(ret),
	if n<=ndim then outer: gr[n+1],
	if m<n then inner: gr[m+1],
	ret:ret -inner - outer,
	[inner, outer, ret]
);

comm(a,b):= cliffsimp1 (expand(a. b - b. a))/2;
acomm(a,b):=cliffsimp1 (expand(a. b + b. a))/2;

/*
reciprocal automorphism
*/
invautom(vv):=block( [ee, aa, ei, listarith:true],
 [ee, aa]:clicoeff(vv,'list),
 ei: maplist( cinvblade, ee),
 ei. aa
);

/*
inverse of a blade
*/
cinvblade(ab):=block( [dd:ab.ab],
	dd:dotsimpc(expand(dd)),
	if not scalarp(dd) then error(dd, "  not a scalar"),
	if dd#0 then dd:1/dd,
	ab*dd
);

/*
grade  automorphism by  predicate
predf requires 2 arguments : grade part and grade index
*/
predautom(vv, predf):=block ([gr, v:0, k, w],
	if not freeof(".", vv) then 
		gr: grade(vv, true)
	else 
		gr: grade(vv),	
	for i:1 thru ndim+1 do (
		w:apply(predf, [gr[i], i]),
		if w then k:-1 else k:1, 
		v:v + k * gr[i] 
	),
	v
);

/* 
Hitzer-Sangwine automorphism
*/
hautom(vv, lst):=block([listarith:true ],
	predautom(vv, lambda([u,v],  member(v, lst+1)))
);

/* 
scalar part automorphism
*/
sautom(vv):=predautom(vv, lambda([u,v], not scalarp(u)));

psautom(vv):=predautom(vv, lambda([u,v], maxgrade(u)=ndim));

/*  Shirokov quaternion  type classification */
qclass (vv) :=block ( [ar, ai, as, br, bi, bc],
	ar:dotreverse(vv),
	ai:cinvolve(vv),	
	br:(vv - ar)/2,
	br:apply1(br, clifsimp10, clifsimp21),
	bi:(vv-ai)/2,
	bi:apply1(bi, clifsimp10, clifsimp21),
	if verbose=true then display(bi, ar),
	if br#0 then br:1,
	if bi#0 then bi:1,
	/*disp([br, bi]),*/
	if br=0 and bi=0 then 0
	elseif bi=1 and br=0 then 1 
	elseif bi=0 and br=1 then 2
	elseif bi=1 and br=1 then 3
);

/**
class-grade decomposition 
*/
cdgrade(vv, classf):=block ([gr, w, k, cs, clist],
	if not freeof(".", vv) then 
		gr: grade(expand(vv))
	else 
		gr: grade(vv),
	local(cs), 
	for i:1 thru ndim+1 do (
		k:apply(classf, [gr[i], i]),
		if op(cs[k])='cs then cs[k]:0, 
		cs[k]:cs[k]+gr[i]
	),	
	listarray(cs)
);

/**
even-odd decomposition
*/
evdecomp(vv):=cdgrade(vv, lambda([u, v ],  if oddp(v) then 1 else 2));

/*  Shirokov quaternion  type  grading */
qgrade(vv):=cdgrade(vv, lambda([u,v ],  qclass(u)+1));


put('clifford, 'v24,'version);
put('clifford, "Dimiter Prodanov", 'author);
put('clifford, "(C) - Dimiter Prodanov, 2015 - 2021", 'copyright);

ttyoff:false;

print("package name: clifford.mac");
print("author: ", get('clifford,'author));
print("version:", get('clifford,'version));
print("Recommended location: share/contrib");
print("last update: 15 Jul 2021");